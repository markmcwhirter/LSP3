@page
@model LSP3.Pages.BookSearchModel
@{
    Layout = "_LayoutAdmin2";
}

<div class="container-fluid">
    <div class="content" style="width:60%;">
        <div style="height:10px;"></div>
        <div class="row">
            <div class="col-sm-2">
                <button type="button" id="savefiltermodel" onclick="saveFilterModel();" class="btn btn-outline-success btn-sm" style="color: black">Save Filter</button>
            </div>
            <div class="col-sm-2">
                <button type="button" id="restorefiltermodel" onclick="restoreFilterModel();" class="btn btn-outline-success btn-sm" style="color: black">Restore Filter</button>
            </div>
            <div class="col-sm-2">
                <button type="button" id="clearfilters" onclick="clearFilters();" class="btn btn-outline-danger btn-sm" style="color: black">Reset Filters</button>
            </div>
            <div class="col-sm-2">
                <button type="button" id="destroyfilter" onclick="destroyFilter();" class="btn btn-outline-danger btn-sm" style="color: black">Destroy Filter</button>
            </div>
            <div class="col-sm-2">
                Saved Filters: <span id="savedFilters">(none)</span>
            </div>


        </div>
    </div>
</div>
<div style="height:10px;"></div>
<div id="myGrid" class="ag-theme-alpine" style="height: 780px; width:100%;"></div>

<script type="text/javascript">


    const columnDefs = [
        { field: 'author', headerName: 'Author', sortable: true },
        { field: 'bookID', headerName: 'BookID', sortable: true, cellDataType: 'number', sortable: true, filter: 'agNumberColumnFilter' },
        { field: 'title', flex: 2, headerName: 'Title' },
        { field: 'subtitle', flex: 2, headerName: 'SubTitle' },
        { field: 'isbn', headerName: 'ISBN' },
        { field: 'notes', headerName: 'Notes' },

    ];

    const gridOptions = {
        columnDefs: columnDefs,
        pagination: true,
        paginationPageSize: 20,
        rowHeight: 32.5,
        defaultColDef: {
            filter: "agTextColumnFilter",
            floatingFilter: true,
            editable: false,
            sortable: true,
            flex: 1
        },
        rowModelType: 'serverSide',

        // Datasource definition
        serverSideDatasource: {
            getRows: (params) => { 
                console.log("[Datasource] - rows requested by grid: ", params.request);
                const { startRow, endRow, sortModel } = params.request;
                //debugger;
                let sortColumn = null;
                let sortDirection = null;
                let filter = JSON.stringify(params.request.filterModel);

                // Extract sorting information
                if (sortModel.length > 0) {
                    sortColumn = sortModel[0].colId;
                    sortDirection = sortModel[0].sort;
                }

                // Build your API request URL
                const url = API_URL + `book/gridsearch?startRow=${startRow}&endRow=${endRow}&sortColumn=${sortColumn}&sortDirection=${sortDirection}&filter=${filter}`;
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        debugger;
                        params.success({ rowData: data, rowCount: data.length });  // Adjust 'totalRecords' if your API provides it
                    })
                    .catch(error => {
                        console.error("Error fetching data:", error);
                        params.fail();
                    });
            }
        }

    };

    // Create the grid instance
    gridApi = new agGrid.createGrid(document.getElementById('myGrid'), gridOptions);


    var savedFilterModel = null;

    function clearFilters() {
        gridApi.setFilterModel(null);
    }

    function saveFilterModel() {

        savedFilterModel = gridApi.getFilterModel();

        var keys = Object.keys(savedFilterModel);
        var savedFilters = keys.length > 0 ? keys.join(", ") : "(none)";

        document.querySelector("#savedFilters").textContent = savedFilters;
    }

    function restoreFilterModel() {
        gridApi.setFilterModel(savedFilterModel);
    }

    function destroyFilter() {
        // gridApi.destroyFilter("athlete");
        gridApi.setFilterModel(null);

        document.querySelector("#savedFilters").textContent = '';
    }
    function currencyFormatter(currency) {
        debugger;
        if (currency === undefined ) {
            return "$0";
        }
        else {

            var sansDec = currency.toFixed(0);
            var formatted = sansDec.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            return "$" + `${formatted}`;
        }
    }
</script>

