@page
@model LSP3.Pages.SearchModel
@{
    Layout = null; // Specify no layout
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ag-Grid Example</title>
    <link rel="stylesheet" href="~/css/ag-grid.css" asp-append-version="true" type="text/css" />
    <link rel="stylesheet" href="~/css/ag-theme-material.css" asp-append-version="true" type="text/css" /> 

@*     <link rel="stylesheet" href="https://unpkg.com/ag-grid-community/dist/styles/ag-grid.css">
    <link rel="stylesheet" href="https://unpkg.com/ag-grid-community/dist/styles/ag-theme-alpine.css"> *@

</head>
<body>

    <div id="myGrid" style="height: 800px; width:1200px;" class="ag-theme-material"></div>

    @* <script src="Scripts/ag-grid-community.min.noStyle.js" type="text/javascript"></script> *@
    <script src="https://unpkg.com/ag-grid-enterprise/dist/ag-grid-enterprise.min.js"></script>
    <script>
 
        // Column definitions
        const columnDefs = [
            { field: 'authorID', sortable: true, filter: true, editable: false },
            { field: 'lastName', sortable: true, filter: true, editable: true },
            { field: 'firstName', sortable: true, filter: true, editable: true  },
            { field: 'eMail', sortable: true, filter: true, editable: true }
        ];

        // Grid options
        const gridOptions = {
            columnDefs: columnDefs,
            pagination: true,
            paginationPageSize: 100,

            // Enable server-side sorting and filtering
            rowModelType: 'serverSide',

            // Datasource definition
            serverSideDatasource: {
                getRows: (params) => { // This function is called by ag-Grid
                    const { startRow, endRow, sortModel } = params.request;

                    let sortColumn = null;
                    let sortDirection = null;

                    // Extract sorting information
                    if (sortModel.length > 0) {
                        sortColumn = sortModel[0].colId;
                        sortDirection = sortModel[0].sort;
                    }

                    // Build your API request URL
                    const urlold = `/api/products?startRow=${startRow}&endRow=${endRow}&sortColumn=${sortColumn}&sortDirection=${sortDirection}`;
                    const url = `http://localhost:5253/api/author/gridsearch?startRow=${startRow}&endRow=${endRow}&sortColumn=${sortColumn}&sortDirection=${sortDirection}`;
                    fetch(url)
                        .then(response =>  response.json())
                        .then(data => {
                            //  Tell the grid we're done and provide total record count
                            params.success({ rowData: data, rowCount: data.totalRecords });  // Adjust 'totalRecords' if your API provides it
                        })
                        .catch(error => {
                            console.error("Error fetching data:", error);
                            params.fail();
                        });
                }
            }
        };

        // Create the grid instance
        new agGrid.createGrid(document.getElementById('myGrid'), gridOptions);
    </script>
</body>
</html>

