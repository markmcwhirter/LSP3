@page
@model LSP3.Pages.SearchModel
@{
    Layout = "_LayoutAdmin2";
}



<div class="container-fluid">
    <div class="content" style="width:60%;">
        <div style="height:10px;"></div>
        <div class="row">
            <div class="col-sm-2">
                <button type="button" id="savefiltermodel" onclick="saveFilterModel();" class="btn btn-outline-success btn-sm" style="color: black">Save Filter</button>
            </div>
            <div class="col-sm-2">
                <button type="button" id="savefiltermodel" onclick="restoreFilterModel();" class="btn btn-outline-success btn-sm" style="color: black">Restore Filter</button>
            </div>
            <div class="col-sm-2">
                <button type="button" id="savefiltermodel" onclick="clearFilters();" class="btn btn-outline-danger btn-sm" style="color: black">Reset Filters</button>
            </div>
            <div class="col-sm-2">
                <button type="button" id="savefiltermodel" onclick="destroyFilter();" class="btn btn-outline-danger btn-sm" style="color: black">Destroy Filter</button>
            </div>
            <div class="col-sm-2">
                Saved Filters: <span id="savedFilters">(none)</span>
            </div>


        </div>
    </div>
</div>
<div style="height:10px;"></div>
<div id="myGrid" class="ag-theme-alpine" style="height: 800px; width: 1200px"></div>


<script>

    // Column definitions
    const columnDefs = [
        { field: 'authorID', flex: 1, headerName: 'Author ID', cellDataType: 'number', sortable: true, filter: 'agNumberColumnFilter', editable: false },
        { field: 'lastName', flex: 1, headerName: 'Last Name', sortable: true, filter: 'agTextColumnFilter', editable: true },
        { field: 'firstName', flex: 1, headerName: 'First Name', sortable: true, filter: 'agTextColumnFilter', editable: true },
        { field: 'eMail', flex: 2, headerName: 'EMail', sortable: true, filter: 'agTextColumnFilter', editable: true },
        { field: 'notes', flex: 1, headerName: 'Notes', sortable: true, filter: 'agTextColumnFilter', editable: true },
        { field: 'infoLink', flex: 1, headerName: 'Info', sortable: false, filter: false, editable: false, cellRenderer: params => { return "<a href='Admin?authorid=" + params.value + "'>Info</a>"; } },
        { field: 'editLink', flex: 1, headerName: 'Edit', sortable: false, filter: false, editable: false, cellRenderer: params => { return "<a href='ProfileModify?id=" + params.value + "'>Edit</a>"; } },
        { field: 'deleteLink', flex: 1, headerName: 'Delete', sortable: false, filter: false, editable: false, cellRenderer: params => { return "<a href='DeleteAuthor?id=" + params.value + "'>Delete</a>"; } }
    ];

    let gridApi;

    // Grid options
    const gridOptions = {
        columnDefs: columnDefs,
        pagination: true,
        paginationPageSize: 20,
        //: true,
        // rowGroupPanelShow: "always",
        // pivotPanelShow: "always",

        // Enable server-side sorting and filtering
        rowModelType: 'serverSide',
        //serverSideStoreType: 'partial',

        // Datasource definition
        serverSideDatasource: {
            getRows: (params) => { // This function is called by ag-Grid
                const { startRow, endRow, sortModel } = params.request;
                //debugger;
                let sortColumn = null;
                let sortDirection = null;
                let filter = JSON.stringify(params.request.filterModel);

                // Extract sorting information
                if (sortModel.length > 0) {
                    sortColumn = sortModel[0].colId;
                    sortDirection = sortModel[0].sort;
                }

                // Build your API request URL
                const url = API_URL + `author/gridsearch?startRow=${startRow}&endRow=${endRow}&sortColumn=${sortColumn}&sortDirection=${sortDirection}&filter=${filter}`;
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        //  Tell the grid we're done and provide total record count
                        params.success({ rowData: data, rowCount: data.totalRecords });  // Adjust 'totalRecords' if your API provides it
                    })
                    .catch(error => {
                        console.error("Error fetching data:", error);
                        params.fail();
                    });
            }
        }
    };

    // Create the grid instance
    gridApi = new agGrid.createGrid(document.getElementById('myGrid'), gridOptions);


    var savedFilterModel = null;

    function clearFilters() {
        gridApi.setFilterModel(null);
    }

    function saveFilterModel() {

        savedFilterModel = gridApi.getFilterModel();

        var keys = Object.keys(savedFilterModel);
        var savedFilters = keys.length > 0 ? keys.join(", ") : "(none)";

        document.querySelector("#savedFilters").textContent = savedFilters;
    }

    function restoreFilterModel() {
        gridApi.setFilterModel(savedFilterModel);
    }

    function destroyFilter() {
        gridApi.destroyFilter("athlete");
        gridApi.setFilterModel(null);

        document.querySelector("#savedFilters").textContent = '';
    }

    gridApi.addEventListener('cellValueChanged', function (event) {
        debugger;
        // get the updated row data
        var updatedRowData = event.data;
        delete updatedRowData.editLink;
        delete updatedRowData.deleteLink;
        delete updatedRowData.infoLink;

        let options = {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updatedRowData)
        };

        fetch(API_URL + "author/update", options)
            .then(
                response => { return 'Success'; }
            ).then(
                html => console.log(html)
            );

        alert('Update sucessful');
    });

</script>
