@page
@model LSP3.Pages.SearchModel
@{
    Layout = "_LayoutAdmin";
}

<div id="myGrid" class="ag-theme-alpine" style="height: 800px; width: 1200px"></div>


<script>

    // Column definitions
    const columnDefs = [
        { field: 'authorID', headerName: 'Author ID', cellDataType: 'number', sortable: true, filter: true, editable: false },
        { field: 'lastName', headerName: 'Last Name', sortable: true, filter: true, editable: true },
        { field: 'firstName', headerName: 'First Name', sortable: true, filter: true, editable: true },
        { field: 'eMail', headerName: 'EMail', sortable: true, filter: true, editable: true },
        { field: 'infoLink', headerName: 'Info', sortable: false, filter: false, editable: false, cellRenderer: params => { return "<a href='Admin?authorid=" + params.value + "'>Info</a>"; } },
        { field: 'editLink', headerName: 'Edit', sortable: false, filter: false, editable: false, cellRenderer: params => { return "<a href='ProfileModify?id=" + params.value + "'>Edit</a>"; } },
        { field: 'deleteLink', headerName: 'Delete', sortable: false, filter: false, editable: false, cellRenderer: params => { return "<a href='DeleteAuthor?id=" + params.value + "'>Delete</a>"; } }
    ];

    // Grid options
    const gridOptions = {
        columnDefs: columnDefs,
        pagination: true,
        paginationPageSize: 20, 
        rowGroupPanelShow: "always",
        pivotPanelShow: "always",

        // Enable server-side sorting and filtering
        rowModelType: 'serverSide',

        // Datasource definition
        serverSideDatasource: {
            getRows: (params) => { // This function is called by ag-Grid
                const { startRow, endRow, sortModel } = params.request;

                let sortColumn = null;
                let sortDirection = null;

                // Extract sorting information
                if (sortModel.length > 0) {
                    sortColumn = sortModel[0].colId;
                    sortDirection = sortModel[0].sort;
                }

                // Build your API request URL              
                const url = API_URL + `author/gridsearch?startRow=${startRow}&endRow=${endRow}&sortColumn=${sortColumn}&sortDirection=${sortDirection}`;
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        //  Tell the grid we're done and provide total record count
                        params.success({ rowData: data, rowCount: data.totalRecords });  // Adjust 'totalRecords' if your API provides it
                    })
                    .catch(error => {
                        console.error("Error fetching data:", error);
                        params.fail();
                    });
            }
        }
    };

    // Create the grid instance
    new agGrid.createGrid(document.getElementById('myGrid'), gridOptions);
</script>

